


See, the project is essentially, let's go step by step, okay? First, there should be a sign-in page. This is just for demo. We don't need to do it full stack, but for the demo purposes, it should be perfect. So first, we have the sign-in page. After sign-in, in the sign-in page, there should be one for hospitals and one for blood banks, okay? So after this, we are going in. For the hospital, I've given you the details of how it looks with the photos. And for the blood bank, we need other stuff. ok so for the hospital we have the dashboard for the hospital then it has a inventory page and then a emergency request page where we ll be using a ml model to find the most efficient blood unit and the best route for the blood unit to reach the hospital, once the blood is booked we send a request to the blood bank page and then the admin in the blood bank will approve this and then we redirect to the tracking page ok in both the hospital and the blood bank application. the blood bank will only have dashboard, inventory,live tracking but no emergency requests . now u understand the whole blood bank and the hospital side pod. now for the drivers we need to show them the live tracking route to them and this should be in one of the page . all of this should be done for the hackathon ok we do have 3 laptops so I think its better to show to them in the 3 laptops like laptop1: hospital pod, laptop 2: blood bank pov, laptop3: drivers pov. ok so tell me if we can do this for the hackathon. I have given u the ppt, website images I have made till now and a flow diagram I made in my note now think and tell me if I can do this. see the pasted content.txt and the work flow image for more details I have also given the previous ui I made only for the hospital now lets do this ok. also tell me if this can be done 



# Project: RaktRadar – Blood Unit Emergency Routing (Hackathon Demo with ML)

This project simulates a **hospital–blood bank–driver network** for emergency blood unit delivery.  
It runs locally on LAN (3 laptops) with no cloud dependencies.  
Roles: **Hospital**, **Blood Bank**, **Driver**.  
Includes a **machine learning model** for blood unit selection + ETA prediction.

---

## Tech Stack
- **Backend**: Node.js + Express + TypeScript + SQLite + Socket.IO
- **ML Service**: Python (scikit-learn + joblib) for model training & inference
- **Frontend**: Next.js (React + TypeScript) + Tailwind CSS + Leaflet
- **Data**: SQLite file, seeded with hospitals, banks, and units
- **Communication**: REST API + WebSocket events
- **Tracking**: simulated GPS ticks or driver-provided updates

---

## Repository Layout
rakt-radar/
README.md
package.json
.env.example
server/
package.json
src/
index.ts
db.ts
schema.sql
seed.ts
sockets.ts
routes/
auth.ts
units.ts
requests.ts
routes.ts
services/
matching.ts // ML call integration
routing.ts
simulate.ts
types.ts
ml/
train.py // builds ML model
model.pkl // trained model
serve.py // FastAPI microservice for inference
web/
package.json
next.config.js
src/
lib/api.ts
lib/socket.ts
lib/types.ts
lib/format.ts
pages/
index.tsx
hospital/
dashboard.tsx
inventory.tsx
emergency.tsx
tracking.tsx
bank/
dashboard.tsx
inventory.tsx
tracking.tsx
driver/
route.tsx
components/
Layout/AppShell.tsx
Auth/RoleGate.tsx
Cards/
Tables/
Map/LiveMap.tsx
styles/globals.css

---

## Data Model (SQLite)
(same as before — Hospitals, Banks, Units, Requests, Routes, TrackPoints)

---

## ML Details

### ML Task 1: Blood Unit Selection
- **Goal**: Given a hospital request (bloodType, qty, urgency, hospital location), predict the **best blood bank(s)** to fulfill it.
- **Features**:
  - Unit expiry (hours left)
  - Bank distance to hospital
  - Urgency (encoded: low=0, med=1, high=2)
  - Bank inventory level
- **Label (training)**: Simulated “good match” vs “bad match” from heuristics.
- **Model**: Logistic Regression or Decision Tree
- **Output**: Probability score per bank → pick highest

### ML Task 2: ETA Prediction
- **Goal**: Predict ETA in minutes given distance and urgency.
- **Features**:
  - Distance (km)
  - Urgency
  - Time of day (simulated random factor)
- **Label**: Simulated from distance/speed + noise
- **Model**: Linear Regression
- **Output**: ETA minutes

---

## ML Service
- A Python FastAPI microservice at `http://localhost:5000`
- Endpoints:
  - `POST /predict-match` → input `{hospitalId, bloodType, qtyMl, urgency}`  
    returns `{bankId, score}`
  - `POST /predict-eta` → input `{distanceKm, urgency}`  
    returns `{etaMin}`
- Models pre-trained with `train.py`, saved as `model.pkl`
- Server loaded with joblib, responds in <100ms

---

## REST API (Node backend)
(same as before, but `POST /requests` now calls ML service instead of pure heuristic)

---

## Socket.IO Events
(same as before)

---

## Services

### Matching (services/matching.ts)
- Call `http://localhost:5000/predict-match` with hospital + request info
- Receive top bank suggestions with scores
- Fetch ETA with `predict-eta`
- Return suggestions to hospital frontend

### Routing (services/routing.ts)
- Haversine distance
- Uses ML-predicted ETA if available, fallback to rule-based

---

## Frontend Pages
(same as before, but Emergency Request page shows **“AI Model Selected Best Bank”** instead of “heuristic”)

---

## Demo Flow
1. Hospital submits emergency request
2. Server calls ML → suggests best blood bank(s)
3. Bank sees request instantly → Approves
4. Driver starts → tracking visible on both hospital & bank
5. AI-predicted ETA shown vs actual simulated ETA

---

## To-Do Tasks

### Setup
- [ ] Initialize monorepo with server + web + ml folders
- [ ] Add root scripts: `dev:server`, `dev:web`, `dev:ml`, `seed`, `start:all`
- [ ] Create `.env.example`

### ML Service
- [ ] Implement `train.py` (scikit-learn logistic regression + linear regression)
- [ ] Train models on synthetic dataset generated from seed data
- [ ] Save as `model.pkl`
- [ ] Implement `serve.py` (FastAPI + joblib) with endpoints `/predict-match` and `/predict-eta`
- [ ] Add script `dev:ml` to run ML server

### Server
- [ ] Implement schema.sql, db.ts, seed.ts
- [ ] Implement types.ts
- [ ] Implement services: matching.ts (calls ML), routing.ts, simulate.ts
- [ ] Implement routes: auth.ts, units.ts, requests.ts, routes.ts
- [ ] Wire sockets.ts with all events
- [ ] Ensure API endpoints work with curl
- [ ] Test ML integration with sample request

### Web
- [ ] Setup Tailwind, AppShell, RoleGate
- [ ] Create sign-in page
- [ ] Create lib/api.ts and lib/socket.ts
- [ ] Hospital pages: dashboard, inventory, emergency (AI-powered), tracking
- [ ] Bank pages: dashboard, inventory, tracking
- [ ] Driver page: route with Start/Picked/Delivered
- [ ] Map component with Leaflet
- [ ] Toasts for socket events

### Polish
- [ ] Show “AI Match Confidence: 92%” in Emergency Request suggestions
- [ ] Compare “Predicted ETA vs Actual ETA” in tracking page
- [ ] Add offline map fallback
- [ ] Add LAN server IP override in settings
- [ ] Add seed reset /demo page

### Demo Check
- [ ] Hospital creates request → ML picks best bank
- [ ] Bank sees request instantly → Approves → route created
- [ ] Driver Start → maps update
- [ ] Predicted ETA shown → actual tracking compared
- [ ] Delivered updates all dashboards
- [ ] Works offline on LAN across 3 laptops


ok now the map is also there but can u ensure this. he map should not just appear out of no where ok. first when the emergency reuest is done our ai searches the database and finds the best blood unit match and once this is done it appears on the hospital screen ok now the hospital selects the blood unit and orders it. only after the hospitals orders the blood the request should go to the blood bank ok. now in the blood bank the request should appear for approval once the approval is given the message is sent to the driver and the driver will click on start route ok. after this driver clicks start route then we use the drivers gps on the map in order to show live tracking for all of the three the hospital, the blood bank and also the the driver ok. is this ok what do u think . i think we should make it work like this
